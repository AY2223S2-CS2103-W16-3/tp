@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":AddEventCommandParser" as AddEventCommandParser LOGIC_COLOR
participant ":ArgumentTokenizer" as ArgumentTokenizer LOGIC_COLOR
participant ":ParserUtil" as ParserUtil LOGIC_COLOR
participant "a:AddEventCommand" as AddEventCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
participant ":AddressBook" as AddressBook MODEL_COLOR
participant ":DateTime" as DateTime MODEL_COLOR
participant ":Event" as Event MODEL_COLOR
end box

[-> LogicManager : execute("addevent ev/Carnival from/17-07-2023 12:00 to/23-07-2023 22:00")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("addevent ev/Carnival from/17-07-2023 12:00 to/23-07-2023 22:00")
activate AddressBookParser

create AddEventCommandParser
AddressBookParser -> AddEventCommandParser
activate AddEventCommandParser

AddEventCommandParser --> AddressBookParser
deactivate AddEventCommandParser

AddressBookParser -> AddEventCommandParser : parse("ev/Carnival from/17-07-2023 12:00 to/23-07-2023 22:00")
activate AddEventCommandParser

AddEventCommandParser -> ArgumentTokenizer : tokenize(args, PREFIX_EVENT_NAME, PREFIX_START_DATE_TIME, PREFIX_END_DATE_TIME)
activate ArgumentTokenizer
ArgumentTokenizer --> AddEventCommandParser
deactivate ArgumentTokenizer

AddEventCommandParser -> AddEventCommandParser : arePrefixesPresent(argMultimap, PREFIX_EVENT_NAME, PREFIX_START_DATE_TIME, PREFIX_END_DATE_TIME)

' To add Line 31 of AddEventCommandParser.java?

AddEventCommandParser -> ParserUtil : parseEventName("Carnival")
activate ParserUtil
ParserUtil --> AddEventCommandParser : EventName
deactivate ParserUtil

AddEventCommandParser -> ParserUtil : parseDateTime("17-07-2023 12:00")
activate ParserUtil
ParserUtil --> AddEventCommandParser : DateTime
deactivate ParserUtil

AddEventCommandParser -> ParserUtil : parseDateTime("23-07-2023 22:00")
activate ParserUtil
ParserUtil --> AddEventCommandParser : DateTime
deactivate ParserUtil

AddEventCommandParser -> DateTime : isValidDateRange("17-07-2023 12:00", "23-07-2023 22:00")
activate DateTime
DateTime --> AddEventCommandParser : Boolean
deactivate DateTime

create Event
AddEventCommandParser -> Event
activate Event
Event --> AddEventCommandParser
deactivate Event

create AddEventCommand
AddEventCommandParser -> AddEventCommand
activate AddEventCommand

AddEventCommand --> AddEventCommandParser
deactivate AddEventCommand

AddEventCommandParser --> AddressBookParser : a
deactivate AddEventCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.
AddEventCommandParser -[hidden]-> AddressBookParser
destroy AddEventCommandParser

AddressBookParser --> LogicManager : a
deactivate AddressBookParser

LogicManager -> AddEventCommand : execute(Model)
activate AddEventCommand

AddEventCommand -> Model : hasEvent(Event)
activate Model
Model --> AddEventCommand : Boolean
deactivate Model

AddEventCommand -> Model : addEvent(Event)
activate Model
Model -> AddressBook : addEvent(Event)
activate AddressBook

AddressBook --> Model
deactivate AddressBook

Model -> Model : updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS)

Model --> AddEventCommand
deactivate Model

create CommandResult
AddEventCommand -> CommandResult
activate CommandResult

CommandResult --> AddEventCommand
deactivate CommandResult

AddEventCommand --> LogicManager : result
deactivate AddEventCommand
AddEventCommand -[hidden]-> AddressBookParser
destroy AddEventCommand

[<--LogicManager
deactivate LogicManager
@enduml
